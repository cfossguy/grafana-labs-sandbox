---
# Source: mimir-distributed/templates/podsecuritypolicy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: development-mimir
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  privileged: false
  allowPrivilegeEscalation: false
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'persistentVolumeClaim'
    - 'secret'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
    - min: 1
      max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
    - min: 1
      max: 65535
  readOnlyRootFilesystem: true
  requiredDropCapabilities:
    - ALL
---
# Source: mimir-distributed/templates/ingester/ingester-pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: development-mimir-ingester
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: ingester
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: development
      app.kubernetes.io/component: ingester
  maxUnavailable: 1
---
# Source: mimir-distributed/templates/store-gateway/store-gateway-pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: development-mimir-store-gateway
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: store-gateway
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: development
      app.kubernetes.io/component: store-gateway
  maxUnavailable: 1
---
# Source: mimir-distributed/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: development-mimir
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
---
# Source: mimir-distributed/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: development-mimir-config
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
data:
  mimir.yaml: bXVsdGl0ZW5hbmN5X2VuYWJsZWQ6IGZhbHNlCgpsaW1pdHM6IHt9CgphY3Rpdml0eV90cmFja2VyOgogIGZpbGVwYXRoOiAvZGF0YS9tZXRyaWNzLWFjdGl2aXR5LmxvZwoKYWxlcnRtYW5hZ2VyOgogIGRhdGFfZGlyOiAnL2RhdGEnCiAgZW5hYmxlX2FwaTogdHJ1ZQogIGV4dGVybmFsX3VybDogJy9hbGVydG1hbmFnZXInCgpmcm9udGVuZF93b3JrZXI6CiAgZnJvbnRlbmRfYWRkcmVzczogZGV2ZWxvcG1lbnQtbWltaXItcXVlcnktZnJvbnRlbmQtaGVhZGxlc3MuZGVmYXVsdC5zdmM6OTA5NQoKcnVsZXI6CiAgZW5hYmxlX2FwaTogdHJ1ZQogIHJ1bGVfcGF0aDogJy9kYXRhJwogIGFsZXJ0bWFuYWdlcl91cmw6IGRuc3Nydm5vYStodHRwOi8vX2h0dHAtbWV0cmljcy5fdGNwLmRldmVsb3BtZW50LW1pbWlyLWFsZXJ0bWFuYWdlci1oZWFkbGVzcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsL2FsZXJ0bWFuYWdlcgoKc2VydmVyOgogIGdycGNfc2VydmVyX21heF9yZWN2X21zZ19zaXplOiAxMDQ4NTc2MDAKICBncnBjX3NlcnZlcl9tYXhfc2VuZF9tc2dfc2l6ZTogMTA0ODU3NjAwCiAgZ3JwY19zZXJ2ZXJfbWF4X2NvbmN1cnJlbnRfc3RyZWFtczogMTAwMAoKZnJvbnRlbmQ6CiAgbG9nX3F1ZXJpZXNfbG9uZ2VyX3RoYW46IDEwcwogIGFsaWduX3F1ZXJpZXNfd2l0aF9zdGVwOiB0cnVlCgpjb21wYWN0b3I6CiAgZGF0YV9kaXI6ICIvZGF0YSIKCmluZ2VzdGVyOgogIHJpbmc6CiAgICBmaW5hbF9zbGVlcDogMHMKICAgIG51bV90b2tlbnM6IDUxMgoKaW5nZXN0ZXJfY2xpZW50OgogIGdycGNfY2xpZW50X2NvbmZpZzoKICAgIG1heF9yZWN2X21zZ19zaXplOiAxMDQ4NTc2MDAKICAgIG1heF9zZW5kX21zZ19zaXplOiAxMDQ4NTc2MDAKCnJ1bnRpbWVfY29uZmlnOgogIGZpbGU6IC92YXIvbWltaXIvcnVudGltZS55YW1sCgptZW1iZXJsaXN0OgogIGFib3J0X2lmX2NsdXN0ZXJfam9pbl9mYWlsczogZmFsc2UKICBjb21wcmVzc2lvbl9lbmFibGVkOiBmYWxzZQogIGpvaW5fbWVtYmVyczoKICAtIGRldmVsb3BtZW50LW1pbWlyLWdvc3NpcC1yaW5nCgojIFRoaXMgY29uZmlndXJlcyBob3cgdGhlIHN0b3JlLWdhdGV3YXkgc3luY2hyb25pemVzIGJsb2NrcyBzdG9yZWQgaW4gdGhlIGJ1Y2tldC4gSXQgdXNlcyBNaW5pbyBieSBkZWZhdWx0IGZvciBnZXR0aW5nIHN0YXJ0ZWQgKGNvbmZpZ3VyZWQgdmlhIGZsYWdzKSBidXQgdGhpcyBzaG91bGQgYmUgY2hhbmdlZCBmb3IgcHJvZHVjdGlvbiBkZXBsb3ltZW50cy4KYmxvY2tzX3N0b3JhZ2U6CiAgYmFja2VuZDogczMKICB0c2RiOgogICAgZGlyOiAvZGF0YS90c2RiCiAgYnVja2V0X3N0b3JlOgogICAgc3luY19kaXI6IC9kYXRhL3RzZGItc3luYwo=
---
# Source: mimir-distributed/templates/nginx/nginx-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: development-mimir-nginx
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: nginx
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
data:
  nginx.conf: |
    worker_processes  5;  ## Default: 1
    error_log  /dev/stderr;
    pid        /tmp/nginx.pid;
    worker_rlimit_nofile 8192;
    
    events {
      worker_connections  4096;  ## Default: 1024
    }
    
    http {
      client_body_temp_path /tmp/client_temp;
      proxy_temp_path       /tmp/proxy_temp_path;
      fastcgi_temp_path     /tmp/fastcgi_temp;
      uwsgi_temp_path       /tmp/uwsgi_temp;
      scgi_temp_path        /tmp/scgi_temp;
    
      default_type application/octet-stream;
      log_format   main '$remote_addr - $remote_user [$time_local]  $status '
            '"$request" $body_bytes_sent "$http_referer" '
            '"$http_user_agent" "$http_x_forwarded_for"';
      access_log   /dev/stderr  main;
    
      sendfile     on;
      tcp_nopush   on;
      resolver kube-dns.kube-system.svc.cluster.local;
    
      server {
        listen 8080;
    
        location = / {
          return 200 'OK';
          auth_basic off;
        }
        proxy_set_header X-Scope-OrgID 0;
    
        # Distributor endpoints
        location /distributor {
          proxy_pass      http://development-mimir-distributor.default.svc.cluster.local:8080$request_uri;
        }
        location = /api/v1/push {
          proxy_pass      http://development-mimir-distributor.default.svc.cluster.local:8080$request_uri;
        }
    
        # Alertmanager endpoints
        location /alertmanager {
          proxy_pass      http://development-mimir-alertmanager.default.svc.cluster.local:8080$request_uri;
        }
        location = /multitenant_alertmanager/status {
          proxy_pass      http://development-mimir-alertmanager.default.svc.cluster.local:8080$request_uri;
        }
        location = /api/v1/alerts {
          proxy_pass      http://development-mimir-alertmanager.default.svc.cluster.local:8080$request_uri;
        }
    
        # Ruler endpoints
        location /prometheus/config/v1/rules {
          proxy_pass      http://development-mimir-ruler.default.svc.cluster.local:8080$request_uri;
        }
        location /prometheus/api/v1/rules {
          proxy_pass      http://development-mimir-ruler.default.svc.cluster.local:8080$request_uri;
        }
    
        location /api/v1/rules {
          proxy_pass      http://development-mimir-ruler.default.svc.cluster.local:8080$request_uri;
        }
        location /prometheus/api/v1/alerts {
          proxy_pass      http://development-mimir-ruler.default.svc.cluster.local:8080$request_uri;
        }
        location /prometheus/rules {
          proxy_pass      http://development-mimir-ruler.default.svc.cluster.local:8080$request_uri;
        }
        location = /ruler/ring {
          proxy_pass      http://development-mimir-ruler.default.svc.cluster.local:8080$request_uri;
        }
    
        # Rest of /prometheus goes to the query frontend
        location /prometheus {
          proxy_pass      http://development-mimir-query-frontend.default.svc.cluster.local:8080$request_uri;
        }
    
        # Buildinfo endpoint can go to any component
        location = /api/v1/status/buildinfo {
          proxy_pass      http://development-mimir-query-frontend.default.svc.cluster.local:8080$request_uri;
        }
      }
    }
---
# Source: mimir-distributed/templates/runtime-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: development-mimir-runtime
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
data:
  runtime.yaml: |
    
    {}
---
# Source: mimir-distributed/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: development-mimir
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:      ['extensions']
  resources:      ['podsecuritypolicies']
  verbs:          ['use']
  resourceNames:  [development-mimir]
---
# Source: mimir-distributed/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: development-mimir
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: development-mimir
subjects:
- kind: ServiceAccount
  name: development-mimir
---
# Source: mimir-distributed/templates/alertmanager/alertmanager-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: development-mimir-alertmanager-headless
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: alertmanager
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
    prometheus.io/service-monitor: "false"
  annotations:
    {}
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
    - port: 9094
      protocol: TCP
      name: cluster
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: alertmanager
---
# Source: mimir-distributed/templates/alertmanager/alertmanager-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: development-mimir-alertmanager
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: alertmanager
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: alertmanager
---
# Source: mimir-distributed/templates/compactor/compactor-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: development-mimir-compactor
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: compactor
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: compactor
---
# Source: mimir-distributed/templates/distributor/distributor-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: development-mimir-distributor
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: distributor
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: distributor
---
# Source: mimir-distributed/templates/gossip-ring/gossip-ring-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: development-mimir-gossip-ring
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: gossip-ring
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: gossip-ring
      port: 7946
      protocol: TCP
      targetPort: 7946
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/part-of: memberlist
---
# Source: mimir-distributed/templates/ingester/ingester-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: development-mimir-ingester-headless
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: ingester
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
    prometheus.io/service-monitor: "false"
  annotations:
    {}
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: ingester
---
# Source: mimir-distributed/templates/ingester/ingester-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: development-mimir-ingester
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: ingester
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: ingester
---
# Source: mimir-distributed/templates/nginx/nginx-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: development-mimir-nginx
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: nginx
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - name: http-metric
      port: 80
      targetPort: http-metric
      protocol: TCP
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: nginx
---
# Source: mimir-distributed/templates/overrides-exporter/overrides-exporter-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: development-mimir-overrides-exporter
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: overrides-exporter
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: overrides-exporter
---
# Source: mimir-distributed/templates/querier/querier-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: development-mimir-querier
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: querier
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: querier
---
# Source: mimir-distributed/templates/query-frontend/query-frontend-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: development-mimir-query-frontend-headless
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: query-frontend
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
    prometheus.io/service-monitor: "false"
  annotations:
    {}
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: query-frontend
---
# Source: mimir-distributed/templates/query-frontend/query-frontend-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: development-mimir-query-frontend
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: query-frontend
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: query-frontend
---
# Source: mimir-distributed/templates/ruler/ruler-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: development-mimir-ruler
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: ruler
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: ruler
---
# Source: mimir-distributed/templates/store-gateway/store-gateway-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: development-mimir-store-gateway-headless
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: store-gateway
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
    prometheus.io/service-monitor: "false"
  annotations:
    {}
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: store-gateway
---
# Source: mimir-distributed/templates/store-gateway/store-gateway-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: development-mimir-store-gateway
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: store-gateway
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: store-gateway
---
# Source: mimir-distributed/templates/distributor/distributor-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: development-mimir-distributor
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: distributor
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: development
      app.kubernetes.io/component: distributor
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-2.0.14
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: development
        app.kubernetes.io/version: "2.0.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: distributor
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: 79958d50caedd64b8da6e807523ffc48c9afe0ca88072c0241d7558ababa304b
    spec:
      serviceAccountName: development-mimir
      securityContext:
        {}
      initContainers:
        []
      containers:
        - name: distributor
          image: "grafana/mimir:2.0.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=distributor"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: target
                operator: In
                values:
                - distributor
            topologyKey: kubernetes.io/hostname
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          secret:
            secretName: development-mimir-config
        - name: runtime-config
          configMap:
            name: development-mimir-runtime
        - name: storage
          emptyDir: {}
---
# Source: mimir-distributed/templates/nginx/nginx-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: development-mimir-nginx
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: nginx
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: development
      app.kubernetes.io/component: nginx
  template:
    metadata:
      annotations:
        checksum/config: b11edfc30d8ac6326697d56556d307c3d108bf731d66688bbadca0112a540f56
      labels:
        helm.sh/chart: mimir-distributed-2.0.14
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: development
        app.kubernetes.io/version: "2.0.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: nginx
    spec:
      serviceAccountName: development-mimir
      securityContext:
        fsGroup: 101
        runAsGroup: 101
        runAsNonRoot: true
        runAsUser: 101
      terminationGracePeriodSeconds: 30
      containers:
        - name: nginx
          image: docker.io/nginxinc/nginx-unprivileged:1.19-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - name: http-metric
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: http-metric
            initialDelaySeconds: 15
            timeoutSeconds: 1
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: config
              mountPath: /etc/nginx
            - name: tmp
              mountPath: /tmp
            - name: docker-entrypoint-d-override
              mountPath: /docker-entrypoint.d
          resources:
            {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: component
                      operator: In
                      values:
                        - nginx
                topologyKey: failure-domain.beta.kubernetes.io/zone
        
      volumes:
        - name: config
          configMap:
            name: development-mimir-nginx
        - name: tmp
          emptyDir: {}
        - name: docker-entrypoint-d-override
          emptyDir: {}
---
# Source: mimir-distributed/templates/overrides-exporter/overrides-exporter-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    {}
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: overrides-exporter
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  name: development-mimir-overrides-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: development
      app.kubernetes.io/component: overrides-exporter
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-2.0.14
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: development
        app.kubernetes.io/version: "2.0.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: overrides-exporter
      annotations:
        checksum/config: 79958d50caedd64b8da6e807523ffc48c9afe0ca88072c0241d7558ababa304b
    spec:
      serviceAccountName: development-mimir
      securityContext:
        {}
      initContainers:
        []
      containers:
        - name: overrides-exporter
          image: "grafana/mimir:2.0.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=overrides-exporter"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          secret:
            secretName: development-mimir-config
        - name: runtime-config
          configMap:
            name: development-mimir-runtime
        - name: storage
          emptyDir: {}
---
# Source: mimir-distributed/templates/querier/querier-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: development-mimir-querier
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: querier
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: development
      app.kubernetes.io/component: querier
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-2.0.14
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: development
        app.kubernetes.io/version: "2.0.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: querier
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: 79958d50caedd64b8da6e807523ffc48c9afe0ca88072c0241d7558ababa304b
    spec:
      serviceAccountName: development-mimir
      securityContext:
        {}
      initContainers:
        []
      containers:
        - name: querier
          image: "grafana/mimir:2.0.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=querier"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: target
                  operator: In
                  values:
                  - querier
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 180
      volumes:
        - name: config
          secret:
            secretName: development-mimir-config
        - name: runtime-config
          configMap:
            name: development-mimir-runtime
        - name: storage
          emptyDir: {}
---
# Source: mimir-distributed/templates/query-frontend/query-frontend-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: development-mimir-query-frontend
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: query-frontend
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: development
      app.kubernetes.io/component: query-frontend
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-2.0.14
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: development
        app.kubernetes.io/version: "2.0.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: query-frontend
      annotations:
        checksum/config: 79958d50caedd64b8da6e807523ffc48c9afe0ca88072c0241d7558ababa304b
    spec:
      serviceAccountName: development-mimir
      securityContext:
        {}
      initContainers:
        []
      containers:
        - name: query-frontend
          image: "grafana/mimir:2.0.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=query-frontend"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: runtime-config
              mountPath: /var/mimir
            - name: config
              mountPath: /etc/mimir
            - name: storage
              mountPath: /data
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: target
                  operator: In
                  values:
                  - query-frontend
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 180
      volumes:
        - name: config
          secret:
            secretName: development-mimir-config
        - name: runtime-config
          configMap:
            name: development-mimir-runtime
        - name: storage
          emptyDir: {}
---
# Source: mimir-distributed/templates/ruler/ruler-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: development-mimir-ruler
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: ruler
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: development
      app.kubernetes.io/component: ruler
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-2.0.14
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: development
        app.kubernetes.io/version: "2.0.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: ruler
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: 79958d50caedd64b8da6e807523ffc48c9afe0ca88072c0241d7558ababa304b
    spec:
      serviceAccountName: development-mimir
      securityContext:
        {}
      initContainers:
        []
      containers:
        - name: ruler
          image: "grafana/mimir:2.0.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=ruler"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 180
      volumes:
        - name: config
          secret:
            secretName: development-mimir-config
        - name: runtime-config
          configMap:
            name: development-mimir-runtime
        - name: storage
          emptyDir: {}
---
# Source: mimir-distributed/templates/alertmanager/alertmanager-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: development-mimir-alertmanager
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: alertmanager
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: development
      app.kubernetes.io/component: alertmanager
  updateStrategy:
    type: RollingUpdate
  serviceName: development-mimir-alertmanager
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes:
          
          - ReadWriteOnce
        resources:
          requests:
            storage: "1Gi"
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-2.0.14
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: development
        app.kubernetes.io/version: "2.0.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: alertmanager
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: 79958d50caedd64b8da6e807523ffc48c9afe0ca88072c0241d7558ababa304b
    spec:
      serviceAccountName: development-mimir
      securityContext:
        {}
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          secret:
            secretName: development-mimir-config
        - name: runtime-config
          configMap:
            name: development-mimir-runtime
        - name: tmp
          emptyDir: {}
      containers:
        - name: alertmanager
          image: "grafana/mimir:2.0.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=alertmanager"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
            - name: tmp
              mountPath: /tmp
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
---
# Source: mimir-distributed/templates/compactor/compactor-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: development-mimir-compactor
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: compactor
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: development
      app.kubernetes.io/component: compactor
  updateStrategy:
    type: RollingUpdate
  serviceName: development-mimir-compactor
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes:
          
          - ReadWriteOnce
        resources:
          requests:
            storage: "2Gi"
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-2.0.14
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: development
        app.kubernetes.io/version: "2.0.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: compactor
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: 79958d50caedd64b8da6e807523ffc48c9afe0ca88072c0241d7558ababa304b
    spec:
      serviceAccountName: development-mimir
      securityContext:
        {}
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: target
                  operator: In
                  values:
                  - compactor
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
        []
      terminationGracePeriodSeconds: 240
      volumes:
        - name: config
          secret:
            secretName: development-mimir-config
        - name: runtime-config
          configMap:
            name: development-mimir-runtime
      containers:
        - name: compactor
          image: "grafana/mimir:2.0.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=compactor"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 60
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
---
# Source: mimir-distributed/templates/ingester/ingester-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: development-mimir-ingester
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: ingester
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  podManagementPolicy: Parallel
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: development
      app.kubernetes.io/component: ingester
  updateStrategy:
    type: RollingUpdate
  serviceName: development-mimir-ingester-headless
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes:
          
          - ReadWriteOnce
        resources:
          requests:
            storage: "2Gi"
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-2.0.14
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: development
        app.kubernetes.io/version: "2.0.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: ingester
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: 79958d50caedd64b8da6e807523ffc48c9afe0ca88072c0241d7558ababa304b
    spec:
      serviceAccountName: development-mimir
      securityContext:
        {}
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 240
      volumes:
        - name: config
          secret:
            secretName: development-mimir-config
        - name: runtime-config
          configMap:
            name: development-mimir-runtime
      containers:
        - name: ingester
          image: "grafana/mimir:2.0.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=ingester"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 60
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
---
# Source: mimir-distributed/templates/store-gateway/store-gateway-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: development-mimir-store-gateway
  labels:
    helm.sh/chart: mimir-distributed-2.0.14
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: development
    app.kubernetes.io/component: store-gateway
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: development
      app.kubernetes.io/component: store-gateway
  updateStrategy:
    type: RollingUpdate
  serviceName: development-mimir-store-gateway-headless
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes:
          
          - ReadWriteOnce
        resources:
          requests:
            storage: "2Gi"
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-2.0.14
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: development
        app.kubernetes.io/version: "2.0.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: store-gateway
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: 79958d50caedd64b8da6e807523ffc48c9afe0ca88072c0241d7558ababa304b
    spec:
      serviceAccountName: development-mimir
      securityContext:
        {}
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: target
                operator: In
                values:
                - store-gateway
            topologyKey: kubernetes.io/hostname
      tolerations:
        []
      terminationGracePeriodSeconds: 240
      volumes:
        - name: config
          secret:
            secretName: development-mimir-config
        - name: runtime-config
          configMap:
            name: development-mimir-runtime
      containers:
        - name: store-gateway
          image: "grafana/mimir:2.0.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=store-gateway"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 60
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
          securityContext:
            readOnlyRootFilesystem: true
          env:
